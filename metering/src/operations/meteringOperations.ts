/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MeteringAPIContext } from "../meteringAPIContext";
import {
  UsageEvent,
  MeteringOperationsPostUsageEventOptionalParams,
  MeteringOperationsPostUsageEventResponse,
  BatchUsageEvent,
  MeteringOperationsPostBatchUsageEventOptionalParams,
  MeteringOperationsPostBatchUsageEventResponse
} from "../models";

/** Class representing a MeteringOperations. */
export class MeteringOperations {
  private readonly client: MeteringAPIContext;

  /**
   * Initialize a new instance of the class MeteringOperations class.
   * @param client Reference to the service client
   */
  constructor(client: MeteringAPIContext) {
    this.client = client;
  }

  /**
   * Posts a single usage event to the marketplace metering service API.
   * @param body
   * @param options The options parameters.
   */
  postUsageEvent(
    body: UsageEvent,
    options?: MeteringOperationsPostUsageEventOptionalParams
  ): Promise<MeteringOperationsPostUsageEventResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      postUsageEventOperationSpec
    ) as Promise<MeteringOperationsPostUsageEventResponse>;
  }

  /**
   * The batch usage event API allows you to emit usage events for more than one purchased entity at
   * once. The batch usage event request references the metering services dimension defined by the
   * publisher when publishing the offer.
   * @param body
   * @param options The options parameters.
   */
  postBatchUsageEvent(
    body: BatchUsageEvent,
    options?: MeteringOperationsPostBatchUsageEventOptionalParams
  ): Promise<MeteringOperationsPostBatchUsageEventResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      postBatchUsageEventOperationSpec
    ) as Promise<MeteringOperationsPostBatchUsageEventResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const postUsageEventOperationSpec: coreHttp.OperationSpec = {
  path: "/usageEvent",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.UsageEventOkResponse
    },
    400: {
      bodyMapper: Mappers.UsageEventBadRequestResponse,
      isError: true
    },
    403: {
      isError: true
    },
    409: {
      bodyMapper: Mappers.UsageEventConflictResponse,
      isError: true
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.requestId,
    Parameters.correlationId
  ],
  mediaType: "json",
  serializer
};
const postBatchUsageEventOperationSpec: coreHttp.OperationSpec = {
  path: "/batchUsageEvent",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BatchUsageEventOkResponse
    },
    400: {
      isError: true
    },
    403: {
      isError: true
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.requestId,
    Parameters.correlationId
  ],
  mediaType: "json",
  serializer
};
