/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const UsageEvent: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageEvent",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "Uuid"
        }
      },
      resourceUri: {
        serializedName: "resourceUri",
        type: {
          name: "String"
        }
      },
      quantity: {
        serializedName: "quantity",
        type: {
          name: "Number"
        }
      },
      dimension: {
        serializedName: "dimension",
        type: {
          name: "String"
        }
      },
      effectiveStartTime: {
        serializedName: "effectiveStartTime",
        type: {
          name: "DateTime"
        }
      },
      planId: {
        serializedName: "planId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsageEventOkResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageEventOkResponse",
    modelProperties: {
      usageEventId: {
        serializedName: "usageEventId",
        type: {
          name: "Uuid"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Accepted",
            "Expired",
            "Duplicate",
            "Error",
            "ResourceNotFound",
            "ResourceNotAuthorized",
            "InvalidDimension",
            "InvalidQuantity",
            "BadArgument"
          ]
        }
      },
      messageTime: {
        serializedName: "messageTime",
        type: {
          name: "DateTime"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "Uuid"
        }
      },
      resourceUri: {
        serializedName: "resourceUri",
        type: {
          name: "String"
        }
      },
      quantity: {
        serializedName: "quantity",
        type: {
          name: "Number"
        }
      },
      dimension: {
        serializedName: "dimension",
        type: {
          name: "String"
        }
      },
      effectiveStartTime: {
        serializedName: "effectiveStartTime",
        type: {
          name: "DateTime"
        }
      },
      planId: {
        serializedName: "planId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsageEventBadRequestResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageEventBadRequestResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UsageEventBadRequestResponseDetail"
            }
          }
        }
      }
    }
  }
};

export const UsageEventBadRequestResponseDetail: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageEventBadRequestResponseDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsageEventConflictResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageEventConflictResponse",
    modelProperties: {
      additionalInfo: {
        serializedName: "additionalInfo",
        type: {
          name: "Composite",
          className: "UsageEventConflictResponseAdditionalInfo"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsageEventConflictResponseAdditionalInfo: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageEventConflictResponseAdditionalInfo",
    modelProperties: {
      acceptedMessage: {
        serializedName: "acceptedMessage",
        type: {
          name: "Composite",
          className: "UsageEventOkResponse"
        }
      }
    }
  }
};

export const BatchUsageEvent: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchUsageEvent",
    modelProperties: {
      request: {
        constraints: {
          MinItems: 1,
          MaxItems: 25
        },
        serializedName: "request",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UsageEvent"
            }
          }
        }
      }
    }
  }
};

export const BatchUsageEventOkResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchUsageEventOkResponse",
    modelProperties: {
      result: {
        serializedName: "result",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UsageBatchEventOkMessage"
            }
          }
        }
      },
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UsageBatchEventOkMessage: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageBatchEventOkMessage",
    modelProperties: {
      usageEventId: {
        serializedName: "usageEventId",
        type: {
          name: "Uuid"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Accepted",
            "Expired",
            "Duplicate",
            "Error",
            "ResourceNotFound",
            "ResourceNotAuthorized",
            "InvalidDimension",
            "InvalidQuantity",
            "BadArgument"
          ]
        }
      },
      messageTime: {
        serializedName: "messageTime",
        type: {
          name: "DateTime"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "Uuid"
        }
      },
      resourceUri: {
        serializedName: "resourceUri",
        type: {
          name: "String"
        }
      },
      quantity: {
        serializedName: "quantity",
        type: {
          name: "Number"
        }
      },
      dimension: {
        serializedName: "dimension",
        type: {
          name: "String"
        }
      },
      effectiveStartTime: {
        serializedName: "effectiveStartTime",
        type: {
          name: "DateTime"
        }
      },
      planId: {
        serializedName: "planId",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "UsageEventConflictResponse"
        }
      }
    }
  }
};
