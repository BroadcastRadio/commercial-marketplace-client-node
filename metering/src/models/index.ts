/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export interface UsageEvent {
  /** subscriptionId property value for SaaS offer subscriptions; resourceUsageId property on the managed application resource for managed application offers. For managed applications, only use one of resourceId or resourceUri. */
  resourceId?: string;
  /** Resource URI for the managed app. Used with managed applications. Only use resourceUri or resourceId, but never both. */
  resourceUri?: string;
  /** Number of units consumed */
  quantity?: number;
  /** Dimension identifier */
  dimension?: string;
  /** Time in UTC when the usage event occurred */
  effectiveStartTime?: Date;
  /** Plan associated with the purchased offer */
  planId?: string;
}

export interface UsageEventOkResponse {
  /** Unique identifier associated with the usage event */
  usageEventId?: string;
  /** Status of the operation. */
  status?: UsageEventStatusEnum;
  /** Time this message was created in UTC */
  messageTime?: Date;
  /** Identifier of the resource against which usage is emitted */
  resourceId?: string;
  /** Identifier of the managed app resource against which usage is emitted */
  resourceUri?: string;
  /** Number of units consumed */
  quantity?: number;
  /** Dimension identifier */
  dimension?: string;
  /** Time in UTC when the usage event occurred */
  effectiveStartTime?: Date;
  /** Plan associated with the purchased offer */
  planId?: string;
}

export interface UsageEventBadRequestResponse {
  code?: string;
  message?: string;
  target?: string;
  details?: UsageEventBadRequestResponseDetail[];
}

export interface UsageEventBadRequestResponseDetail {
  code?: string;
  message?: string;
  target?: string;
}

export interface UsageEventConflictResponse {
  additionalInfo?: UsageEventConflictResponseAdditionalInfo;
  message?: string;
  code?: string;
}

export interface UsageEventConflictResponseAdditionalInfo {
  acceptedMessage?: UsageEventOkResponse;
}

export interface BatchUsageEvent {
  request?: UsageEvent[];
}

export interface BatchUsageEventOkResponse {
  result?: UsageBatchEventOkMessage[];
  count?: number;
}

export interface UsageBatchEventOkMessage {
  /** Unique identifier associated with the usage event */
  usageEventId?: string;
  /** Status of the operation. */
  status?: UsageEventStatusEnum;
  /** Time this message was created in UTC */
  messageTime?: Date;
  /** Identifier of the resource against which usage is emitted */
  resourceId?: string;
  /** Identifier of the managed app resource against which usage is emitted */
  resourceUri?: string;
  /** Number of units consumed */
  quantity?: number;
  /** Dimension identifier */
  dimension?: string;
  /** Time in UTC when the usage event occurred */
  effectiveStartTime?: Date;
  /** Plan associated with the purchased offer */
  planId?: string;
  error?: UsageEventConflictResponse;
}

/** Defines values for UsageEventStatusEnum. */
export type UsageEventStatusEnum =
  | "Accepted"
  | "Expired"
  | "Duplicate"
  | "Error"
  | "ResourceNotFound"
  | "ResourceNotAuthorized"
  | "InvalidDimension"
  | "InvalidQuantity"
  | "BadArgument";

/** Optional parameters. */
export interface MeteringOperationsPostUsageEventOptionalParams
  extends coreHttp.OperationOptions {
  /** A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers. */
  requestId?: string;
  /** A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers. */
  correlationId?: string;
}

/** Contains response data for the postUsageEvent operation. */
export type MeteringOperationsPostUsageEventResponse = UsageEventOkResponse & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: UsageEventOkResponse;
  };
};

/** Optional parameters. */
export interface MeteringOperationsPostBatchUsageEventOptionalParams
  extends coreHttp.OperationOptions {
  /** A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers. */
  requestId?: string;
  /** A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers. */
  correlationId?: string;
}

/** Contains response data for the postBatchUsageEvent operation. */
export type MeteringOperationsPostBatchUsageEventResponse = BatchUsageEventOkResponse & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: BatchUsageEventOkResponse;
  };
};

/** Optional parameters. */
export interface MeteringAPIOptionalParams
  extends coreHttp.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
