/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const ResolvedSubscription: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResolvedSubscription",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      subscriptionName: {
        serializedName: "subscriptionName",
        type: {
          name: "String"
        }
      },
      offerId: {
        serializedName: "offerId",
        type: {
          name: "String"
        }
      },
      planId: {
        serializedName: "planId",
        type: {
          name: "String"
        }
      },
      quantity: {
        serializedName: "quantity",
        type: {
          name: "Number"
        }
      },
      subscription: {
        serializedName: "subscription",
        type: {
          name: "Composite",
          className: "Subscription"
        }
      }
    }
  }
};

export const Subscription: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Subscription",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      publisherId: {
        serializedName: "publisherId",
        type: {
          name: "String"
        }
      },
      offerId: {
        serializedName: "offerId",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      saasSubscriptionStatus: {
        serializedName: "saasSubscriptionStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "NotStarted",
            "PendingFulfillmentStart",
            "Subscribed",
            "Suspended",
            "Unsubscribed"
          ]
        }
      },
      beneficiary: {
        serializedName: "beneficiary",
        type: {
          name: "Composite",
          className: "AadIdentifier"
        }
      },
      purchaser: {
        serializedName: "purchaser",
        type: {
          name: "Composite",
          className: "AadIdentifier"
        }
      },
      planId: {
        serializedName: "planId",
        type: {
          name: "String"
        }
      },
      quantity: {
        serializedName: "quantity",
        type: {
          name: "Number"
        }
      },
      term: {
        serializedName: "term",
        type: {
          name: "Composite",
          className: "SubscriptionTerm"
        }
      },
      autoRenew: {
        serializedName: "autoRenew",
        type: {
          name: "Boolean"
        }
      },
      isTest: {
        serializedName: "isTest",
        type: {
          name: "Boolean"
        }
      },
      isFreeTrial: {
        serializedName: "isFreeTrial",
        type: {
          name: "Boolean"
        }
      },
      allowedCustomerOperations: {
        serializedName: "allowedCustomerOperations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["Read", "Update", "Delete"]
            }
          }
        }
      },
      sessionId: {
        serializedName: "sessionId",
        type: {
          name: "Uuid"
        }
      },
      fulfillmentId: {
        serializedName: "fulfillmentId",
        type: {
          name: "Uuid"
        }
      },
      storeFront: {
        serializedName: "storeFront",
        type: {
          name: "String"
        }
      },
      sandboxType: {
        serializedName: "sandboxType",
        type: {
          name: "Enum",
          allowedValues: ["None", "Csp"]
        }
      },
      created: {
        serializedName: "created",
        type: {
          name: "DateTime"
        }
      },
      sessionMode: {
        serializedName: "sessionMode",
        type: {
          name: "Enum",
          allowedValues: ["None", "DryRun"]
        }
      }
    }
  }
};

export const AadIdentifier: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AadIdentifier",
    modelProperties: {
      emailId: {
        serializedName: "emailId",
        type: {
          name: "String"
        }
      },
      objectId: {
        serializedName: "objectId",
        type: {
          name: "Uuid"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "Uuid"
        }
      },
      puid: {
        serializedName: "puid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionTerm: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionTerm",
    modelProperties: {
      startDate: {
        serializedName: "startDate",
        type: {
          name: "DateTime"
        }
      },
      endDate: {
        serializedName: "endDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SubscriptionsResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionsResponse",
    modelProperties: {
      subscriptions: {
        serializedName: "subscriptions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Subscription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "@nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriberPlan: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriberPlan",
    modelProperties: {
      planId: {
        serializedName: "planId",
        type: {
          name: "String"
        }
      },
      quantity: {
        serializedName: "quantity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SubscriptionPlans: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionPlans",
    modelProperties: {
      plans: {
        serializedName: "plans",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Plan"
            }
          }
        }
      }
    }
  }
};

export const Plan: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Plan",
    modelProperties: {
      planId: {
        serializedName: "planId",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      isPrivate: {
        serializedName: "isPrivate",
        type: {
          name: "Boolean"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      hasFreeTrials: {
        serializedName: "hasFreeTrials",
        type: {
          name: "Boolean"
        }
      },
      isPricePerSeat: {
        serializedName: "isPricePerSeat",
        type: {
          name: "Boolean"
        }
      },
      isStopSell: {
        serializedName: "isStopSell",
        type: {
          name: "Boolean"
        }
      },
      market: {
        serializedName: "market",
        type: {
          name: "String"
        }
      },
      planComponents: {
        serializedName: "planComponents",
        type: {
          name: "Composite",
          className: "PlanComponents"
        }
      }
    }
  }
};

export const PlanComponents: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PlanComponents",
    modelProperties: {
      recurrentBillingTerms: {
        serializedName: "recurrentBillingTerms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecurrentBillingTerm"
            }
          }
        }
      },
      meteringDimensions: {
        serializedName: "meteringDimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MeteringDimension"
            }
          }
        }
      }
    }
  }
};

export const RecurrentBillingTerm: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecurrentBillingTerm",
    modelProperties: {
      currency: {
        serializedName: "currency",
        type: {
          name: "String"
        }
      },
      price: {
        serializedName: "price",
        type: {
          name: "Number"
        }
      },
      termUnit: {
        serializedName: "termUnit",
        type: {
          name: "Enum",
          allowedValues: ["P1M", "P1Y", "P2Y", "P3Y"]
        }
      },
      termDescription: {
        serializedName: "termDescription",
        type: {
          name: "String"
        }
      },
      meteredQuantityIncluded: {
        serializedName: "meteredQuantityIncluded",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MeteringedQuantityIncluded"
            }
          }
        }
      }
    }
  }
};

export const MeteringedQuantityIncluded: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MeteringedQuantityIncluded",
    modelProperties: {
      dimensionId: {
        serializedName: "dimensionId",
        type: {
          name: "String"
        }
      },
      units: {
        serializedName: "units",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MeteringDimension: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MeteringDimension",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      currency: {
        serializedName: "currency",
        type: {
          name: "String"
        }
      },
      pricePerUnit: {
        serializedName: "pricePerUnit",
        type: {
          name: "Number"
        }
      },
      unitOfMeasure: {
        serializedName: "unitOfMeasure",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationList: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationList",
    modelProperties: {
      operations: {
        serializedName: "operations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      activityId: {
        serializedName: "activityId",
        type: {
          name: "Uuid"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "Uuid"
        }
      },
      offerId: {
        serializedName: "offerId",
        type: {
          name: "String"
        }
      },
      publisherId: {
        serializedName: "publisherId",
        type: {
          name: "String"
        }
      },
      planId: {
        serializedName: "planId",
        type: {
          name: "String"
        }
      },
      quantity: {
        serializedName: "quantity",
        type: {
          name: "Number"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "Enum",
          allowedValues: [
            "Unsubscribe",
            "ChangePlan",
            "ChangeQuantity",
            "Suspend",
            "Reinstate"
          ]
        }
      },
      timeStamp: {
        serializedName: "timeStamp",
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "NotStarted",
            "InProgress",
            "Succeeded",
            "Failed",
            "Conflict"
          ]
        }
      }
    }
  }
};

export const UpdateOperation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateOperation",
    modelProperties: {
      planId: {
        serializedName: "planId",
        type: {
          name: "String"
        }
      },
      quantity: {
        serializedName: "quantity",
        type: {
          name: "Number"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: ["Success", "Failure"]
        }
      }
    }
  }
};

export const FulfillmentInternalServerErrorResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FulfillmentInternalServerErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "FulfillmentInternalServerErrorResponseError"
        }
      }
    }
  }
};

export const FulfillmentInternalServerErrorResponseError: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FulfillmentInternalServerErrorResponseError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FulfillmentOperationsUpdateSubscriptionHeaders: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FulfillmentOperationsUpdateSubscriptionHeaders",
    modelProperties: {
      operationLocationUri: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FulfillmentOperationsDeleteSubscriptionHeaders: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FulfillmentOperationsDeleteSubscriptionHeaders",
    modelProperties: {
      operationLocationUri: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      }
    }
  }
};
