/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/** Summary of the subscription */
export interface ResolvedSubscription {
  id?: string;
  subscriptionName?: string;
  offerId?: string;
  planId?: string;
  quantity?: number;
  subscription?: Subscription;
}

export interface Subscription {
  id?: string;
  publisherId?: string;
  offerId?: string;
  name?: string;
  /** Indicates the status of the operation. */
  saasSubscriptionStatus?: SubscriptionStatusEnum;
  beneficiary?: AadIdentifier;
  purchaser?: AadIdentifier;
  planId?: string;
  quantity?: number;
  term?: SubscriptionTerm;
  /** Indicating whether the subscription will renew automatically. */
  autoRenew?: boolean;
  /** Indicating whether the current subscription is a test asset. */
  isTest?: boolean;
  /** true - the customer subscription is currently in free trial, false - the customer subscription is not currently in free trial.(optional field - default false) */
  isFreeTrial?: boolean;
  allowedCustomerOperations?: AllowedCustomerOperationsEnum[];
  sessionId?: string;
  fulfillmentId?: string;
  storeFront?: string;
  /** Possible Values are None, Csp (Csp sandbox purchase) */
  sandboxType?: SandboxTypeEnum;
  created?: Date;
  /** Dry Run indicates all transactions run as Test-Mode in the commerce stack */
  sessionMode?: SessionModeEnum;
}

export interface AadIdentifier {
  emailId?: string;
  objectId?: string;
  tenantId?: string;
  puid?: string;
}

export interface SubscriptionTerm {
  startDate?: Date;
  endDate?: Date;
}

export interface SubscriptionsResponse {
  subscriptions?: Subscription[];
  /** Link to get the next set of subscriptions. */
  nextLink?: string;
}

export interface SubscriberPlan {
  planId?: string;
  quantity?: number;
}

export interface SubscriptionPlans {
  plans?: Plan[];
}

export interface Plan {
  planId?: string;
  displayName?: string;
  isPrivate?: boolean;
  description?: string;
  hasFreeTrials?: boolean;
  isPricePerSeat?: boolean;
  isStopSell?: boolean;
  market?: string;
  planComponents?: PlanComponents;
}

export interface PlanComponents {
  recurrentBillingTerms?: RecurrentBillingTerm[];
  meteringDimensions?: MeteringDimension[];
}

export interface RecurrentBillingTerm {
  currency?: string;
  price?: number;
  termUnit?: TermUnitEnum;
  termDescription?: string;
  meteredQuantityIncluded?: MeteringedQuantityIncluded[];
}

export interface MeteringedQuantityIncluded {
  dimensionId?: string;
  units?: string;
}

export interface MeteringDimension {
  id?: string;
  currency?: string;
  pricePerUnit?: number;
  unitOfMeasure?: string;
  displayName?: string;
}

export interface OperationList {
  operations?: Operation[];
}

export interface Operation {
  id?: string;
  activityId?: string;
  subscriptionId?: string;
  offerId?: string;
  publisherId?: string;
  planId?: string;
  quantity?: number;
  action?: OperationActionEnum;
  timeStamp?: Date;
  status?: OperationStatusEnum;
}

export interface UpdateOperation {
  planId?: string;
  quantity?: number;
  status?: UpdateOperationStatusEnum;
}

export interface FulfillmentInternalServerErrorResponse {
  error?: FulfillmentInternalServerErrorResponseError;
}

export interface FulfillmentInternalServerErrorResponseError {
  code?: string;
  message?: string;
}

/** Defines headers for FulfillmentOperations_updateSubscription operation. */
export interface FulfillmentOperationsUpdateSubscriptionHeaders {
  operationLocationUri?: string;
}

/** Defines headers for FulfillmentOperations_deleteSubscription operation. */
export interface FulfillmentOperationsDeleteSubscriptionHeaders {
  operationLocationUri?: string;
}

/** Defines values for SubscriptionStatusEnum. */
export type SubscriptionStatusEnum =
  | "NotStarted"
  | "PendingFulfillmentStart"
  | "Subscribed"
  | "Suspended"
  | "Unsubscribed";
/** Defines values for AllowedCustomerOperationsEnum. */
export type AllowedCustomerOperationsEnum = "Read" | "Update" | "Delete";
/** Defines values for SandboxTypeEnum. */
export type SandboxTypeEnum = "None" | "Csp";
/** Defines values for SessionModeEnum. */
export type SessionModeEnum = "None" | "DryRun";
/** Defines values for TermUnitEnum. */
export type TermUnitEnum = "P1M" | "P1Y" | "P2Y" | "P3Y";
/** Defines values for OperationActionEnum. */
export type OperationActionEnum =
  | "Unsubscribe"
  | "ChangePlan"
  | "ChangeQuantity"
  | "Suspend"
  | "Reinstate";
/** Defines values for OperationStatusEnum. */
export type OperationStatusEnum =
  | "NotStarted"
  | "InProgress"
  | "Succeeded"
  | "Failed"
  | "Conflict";
/** Defines values for UpdateOperationStatusEnum. */
export type UpdateOperationStatusEnum = "Success" | "Failure";

/** Optional parameters. */
export interface FulfillmentOperationsResolveOptionalParams
  extends coreHttp.OperationOptions {
  /** A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers. */
  requestId?: string;
  /** A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers. */
  correlationId?: string;
}

/** Contains response data for the resolve operation. */
export type FulfillmentOperationsResolveResponse = ResolvedSubscription & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ResolvedSubscription;
  };
};

/** Optional parameters. */
export interface FulfillmentOperationsListSubscriptionsOptionalParams
  extends coreHttp.OperationOptions {
  /** A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers. */
  requestId?: string;
  /** A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers. */
  correlationId?: string;
  /** Optional value, only used for ListSubscriptions. */
  continuationToken?: string;
}

/** Contains response data for the listSubscriptions operation. */
export type FulfillmentOperationsListSubscriptionsResponse = SubscriptionsResponse & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: SubscriptionsResponse;
  };
};

/** Optional parameters. */
export interface FulfillmentOperationsGetSubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /** A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers. */
  requestId?: string;
  /** A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers. */
  correlationId?: string;
}

/** Contains response data for the getSubscription operation. */
export type FulfillmentOperationsGetSubscriptionResponse = Subscription & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: Subscription;
  };
};

/** Optional parameters. */
export interface FulfillmentOperationsUpdateSubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /** A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers. */
  requestId?: string;
  /** A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers. */
  correlationId?: string;
}

/** Contains response data for the updateSubscription operation. */
export type FulfillmentOperationsUpdateSubscriptionResponse = FulfillmentOperationsUpdateSubscriptionHeaders & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The parsed HTTP response headers. */
    parsedHeaders: FulfillmentOperationsUpdateSubscriptionHeaders;
  };
};

/** Optional parameters. */
export interface FulfillmentOperationsDeleteSubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /** A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers. */
  requestId?: string;
  /** A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers. */
  correlationId?: string;
}

/** Contains response data for the deleteSubscription operation. */
export type FulfillmentOperationsDeleteSubscriptionResponse = FulfillmentOperationsDeleteSubscriptionHeaders & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The parsed HTTP response headers. */
    parsedHeaders: FulfillmentOperationsDeleteSubscriptionHeaders;
  };
};

/** Optional parameters. */
export interface FulfillmentOperationsListAvailablePlansOptionalParams
  extends coreHttp.OperationOptions {
  /** A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers. */
  requestId?: string;
  /** A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers. */
  correlationId?: string;
}

/** Contains response data for the listAvailablePlans operation. */
export type FulfillmentOperationsListAvailablePlansResponse = SubscriptionPlans & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: SubscriptionPlans;
  };
};

/** Optional parameters. */
export interface FulfillmentOperationsActivateSubscriptionOptionalParams
  extends coreHttp.OperationOptions {
  /** A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers. */
  requestId?: string;
  /** A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers. */
  correlationId?: string;
}

/** Optional parameters. */
export interface FulfillmentOperationsListSubscriptionsNextOptionalParams
  extends coreHttp.OperationOptions {
  /** A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers. */
  requestId?: string;
  /** A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers. */
  correlationId?: string;
  /** Optional value, only used for ListSubscriptions. */
  continuationToken?: string;
}

/** Contains response data for the listSubscriptionsNext operation. */
export type FulfillmentOperationsListSubscriptionsNextResponse = SubscriptionsResponse & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: SubscriptionsResponse;
  };
};

/** Optional parameters. */
export interface SubscriptionOperationsListOperationsOptionalParams
  extends coreHttp.OperationOptions {
  /** A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers. */
  requestId?: string;
  /** A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers. */
  correlationId?: string;
}

/** Contains response data for the listOperations operation. */
export type SubscriptionOperationsListOperationsResponse = OperationList & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: OperationList;
  };
};

/** Optional parameters. */
export interface SubscriptionOperationsGetOperationStatusOptionalParams
  extends coreHttp.OperationOptions {
  /** A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers. */
  requestId?: string;
  /** A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers. */
  correlationId?: string;
}

/** Contains response data for the getOperationStatus operation. */
export type SubscriptionOperationsGetOperationStatusResponse = Operation & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: Operation;
  };
};

/** Optional parameters. */
export interface SubscriptionOperationsUpdateOperationStatusOptionalParams
  extends coreHttp.OperationOptions {
  /** A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers. */
  requestId?: string;
  /** A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers. */
  correlationId?: string;
}

/** Optional parameters. */
export interface SaaSAPIOptionalParams extends coreHttp.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
