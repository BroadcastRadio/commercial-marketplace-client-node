/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { expect } from 'chai';
import * as coreHttp from "@azure/core-http";
import { SaaSAPI } from '../src/saaSAPI';
import * as azureIdentity from "@azure/identity";

function get_client_secret_credential() {
    let tenantId = process.env.AAD_TENANT_ID || '';
    let clientId = process.env.AAD_APP_CLIENT_ID || '';
    let clientSecret = process.env.AAD_APP_CLIENT_SECRET || '';

    if (tenantId == ''){
        console.log("Environment variable AAD_TENANT_ID is not set. Failing.");
        throw "Invalid environment";
    }

    if (clientId == ''){
        console.log("Environment variable AAD_APP_CLIENT_ID is not set. Failing.");
        throw "Invalid environment";
    }

    if (clientSecret == ''){
        console.log("Environment variable AAD_APP_CLIENT_SECRET is not set. Failing.");
        throw "Invalid environment";
    }    

    let credential = new azureIdentity.ClientSecretCredential(
        tenantId!,
        clientId!,
        clientSecret!);

    return credential;
}

describe ("SaaSAPI", () => {
    describe("CredentialAuth", () => {
        it ("Should get a list of subscriptions", async () => {
            let creds = get_client_secret_credential();
            let saasClient = new SaaSAPI(creds);
            let subs = saasClient.fulfillmentOperations.listSubscriptions();
            let foundAtLeastOne = false;
            for (let iter = await subs.next(); iter != undefined && iter != null; iter = await subs.next()) {
                foundAtLeastOne = true;
                console.log(iter.value.id);
            }
            expect(foundAtLeastOne).to.be.true;
        })
    })
});