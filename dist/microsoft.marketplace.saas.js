/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */ 
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/core-http')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/core-http'], factory) :
    (factory((global.MicrosoftMarketplaceSaas = {}),global.coreHttp));
}(this, (function (exports,coreHttp) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    if (typeof Symbol === undefined || !Symbol.asyncIterator) {
        Symbol.asyncIterator = Symbol.for("Symbol.asyncIterator");
    }

    // Copyright (c) Microsoft Corporation.

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    const ResolvedSubscription = {
        type: {
            name: "Composite",
            className: "ResolvedSubscription",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                subscriptionName: {
                    serializedName: "subscriptionName",
                    type: {
                        name: "String"
                    }
                },
                offerId: {
                    serializedName: "offerId",
                    type: {
                        name: "String"
                    }
                },
                planId: {
                    serializedName: "planId",
                    type: {
                        name: "String"
                    }
                },
                quantity: {
                    serializedName: "quantity",
                    type: {
                        name: "Number"
                    }
                },
                subscription: {
                    serializedName: "subscription",
                    type: {
                        name: "Composite",
                        className: "Subscription"
                    }
                }
            }
        }
    };
    const Subscription = {
        type: {
            name: "Composite",
            className: "Subscription",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                publisherId: {
                    serializedName: "publisherId",
                    type: {
                        name: "String"
                    }
                },
                offerId: {
                    serializedName: "offerId",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                saasSubscriptionStatus: {
                    serializedName: "saasSubscriptionStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotStarted",
                            "PendingFulfillmentStart",
                            "Subscribed",
                            "Suspended",
                            "Unsubscribed"
                        ]
                    }
                },
                beneficiary: {
                    serializedName: "beneficiary",
                    type: {
                        name: "Composite",
                        className: "AadIdentifier"
                    }
                },
                purchaser: {
                    serializedName: "purchaser",
                    type: {
                        name: "Composite",
                        className: "AadIdentifier"
                    }
                },
                planId: {
                    serializedName: "planId",
                    type: {
                        name: "String"
                    }
                },
                quantity: {
                    serializedName: "quantity",
                    type: {
                        name: "Number"
                    }
                },
                term: {
                    serializedName: "term",
                    type: {
                        name: "Composite",
                        className: "SubscriptionTerm"
                    }
                },
                autoRenew: {
                    serializedName: "autoRenew",
                    type: {
                        name: "Boolean"
                    }
                },
                isTest: {
                    serializedName: "isTest",
                    type: {
                        name: "Boolean"
                    }
                },
                isFreeTrial: {
                    serializedName: "isFreeTrial",
                    type: {
                        name: "Boolean"
                    }
                },
                allowedCustomerOperations: {
                    serializedName: "allowedCustomerOperations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: ["Read", "Update", "Delete"]
                            }
                        }
                    }
                },
                sessionId: {
                    serializedName: "sessionId",
                    type: {
                        name: "Uuid"
                    }
                },
                fulfillmentId: {
                    serializedName: "fulfillmentId",
                    type: {
                        name: "Uuid"
                    }
                },
                storeFront: {
                    serializedName: "storeFront",
                    type: {
                        name: "String"
                    }
                },
                sandboxType: {
                    serializedName: "sandboxType",
                    type: {
                        name: "Enum",
                        allowedValues: ["None", "Csp"]
                    }
                },
                created: {
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                },
                sessionMode: {
                    serializedName: "sessionMode",
                    type: {
                        name: "Enum",
                        allowedValues: ["None", "DryRun"]
                    }
                }
            }
        }
    };
    const AadIdentifier = {
        type: {
            name: "Composite",
            className: "AadIdentifier",
            modelProperties: {
                emailId: {
                    serializedName: "emailId",
                    type: {
                        name: "String"
                    }
                },
                objectId: {
                    serializedName: "objectId",
                    type: {
                        name: "Uuid"
                    }
                },
                tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "Uuid"
                    }
                },
                puid: {
                    serializedName: "puid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    const SubscriptionTerm = {
        type: {
            name: "Composite",
            className: "SubscriptionTerm",
            modelProperties: {
                startDate: {
                    serializedName: "startDate",
                    type: {
                        name: "DateTime"
                    }
                },
                endDate: {
                    serializedName: "endDate",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    const SubscriptionsResponse = {
        type: {
            name: "Composite",
            className: "SubscriptionsResponse",
            modelProperties: {
                subscriptions: {
                    serializedName: "subscriptions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Subscription"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "@nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    const SubscriberPlan = {
        type: {
            name: "Composite",
            className: "SubscriberPlan",
            modelProperties: {
                planId: {
                    serializedName: "planId",
                    type: {
                        name: "String"
                    }
                },
                quantity: {
                    serializedName: "quantity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    const SubscriptionPlans = {
        type: {
            name: "Composite",
            className: "SubscriptionPlans",
            modelProperties: {
                plans: {
                    serializedName: "plans",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Plan"
                            }
                        }
                    }
                }
            }
        }
    };
    const Plan = {
        type: {
            name: "Composite",
            className: "Plan",
            modelProperties: {
                planId: {
                    serializedName: "planId",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                isPrivate: {
                    serializedName: "isPrivate",
                    type: {
                        name: "Boolean"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                hasFreeTrials: {
                    serializedName: "hasFreeTrials",
                    type: {
                        name: "Boolean"
                    }
                },
                isPricePerSeat: {
                    serializedName: "isPricePerSeat",
                    type: {
                        name: "Boolean"
                    }
                },
                isStopSell: {
                    serializedName: "isStopSell",
                    type: {
                        name: "Boolean"
                    }
                },
                market: {
                    serializedName: "market",
                    type: {
                        name: "String"
                    }
                },
                planComponents: {
                    serializedName: "planComponents",
                    type: {
                        name: "Composite",
                        className: "PlanComponents"
                    }
                }
            }
        }
    };
    const PlanComponents = {
        type: {
            name: "Composite",
            className: "PlanComponents",
            modelProperties: {
                recurrentBillingTerms: {
                    serializedName: "recurrentBillingTerms",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecurrentBillingTerm"
                            }
                        }
                    }
                },
                meteringDimensions: {
                    serializedName: "meteringDimensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MeteringDimension"
                            }
                        }
                    }
                }
            }
        }
    };
    const RecurrentBillingTerm = {
        type: {
            name: "Composite",
            className: "RecurrentBillingTerm",
            modelProperties: {
                currency: {
                    serializedName: "currency",
                    type: {
                        name: "String"
                    }
                },
                price: {
                    serializedName: "price",
                    type: {
                        name: "Number"
                    }
                },
                termUnit: {
                    serializedName: "termUnit",
                    type: {
                        name: "Enum",
                        allowedValues: ["P1M", "P1Y", "P2Y", "P3Y"]
                    }
                },
                termDescription: {
                    serializedName: "termDescription",
                    type: {
                        name: "String"
                    }
                },
                meteredQuantityIncluded: {
                    serializedName: "meteredQuantityIncluded",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MeteringedQuantityIncluded"
                            }
                        }
                    }
                }
            }
        }
    };
    const MeteringedQuantityIncluded = {
        type: {
            name: "Composite",
            className: "MeteringedQuantityIncluded",
            modelProperties: {
                dimensionId: {
                    serializedName: "dimensionId",
                    type: {
                        name: "String"
                    }
                },
                units: {
                    serializedName: "units",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    const MeteringDimension = {
        type: {
            name: "Composite",
            className: "MeteringDimension",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                currency: {
                    serializedName: "currency",
                    type: {
                        name: "String"
                    }
                },
                pricePerUnit: {
                    serializedName: "pricePerUnit",
                    type: {
                        name: "Number"
                    }
                },
                unitOfMeasure: {
                    serializedName: "unitOfMeasure",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    const OperationList = {
        type: {
            name: "Composite",
            className: "OperationList",
            modelProperties: {
                operations: {
                    serializedName: "operations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                }
            }
        }
    };
    const Operation = {
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                activityId: {
                    serializedName: "activityId",
                    type: {
                        name: "Uuid"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "Uuid"
                    }
                },
                offerId: {
                    serializedName: "offerId",
                    type: {
                        name: "String"
                    }
                },
                publisherId: {
                    serializedName: "publisherId",
                    type: {
                        name: "String"
                    }
                },
                planId: {
                    serializedName: "planId",
                    type: {
                        name: "String"
                    }
                },
                quantity: {
                    serializedName: "quantity",
                    type: {
                        name: "Number"
                    }
                },
                action: {
                    serializedName: "action",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unsubscribe",
                            "ChangePlan",
                            "ChangeQuantity",
                            "Suspend",
                            "Reinstate"
                        ]
                    }
                },
                timeStamp: {
                    serializedName: "timeStamp",
                    type: {
                        name: "DateTime"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotStarted",
                            "InProgress",
                            "Succeeded",
                            "Failed",
                            "Conflict"
                        ]
                    }
                }
            }
        }
    };
    const UpdateOperation = {
        type: {
            name: "Composite",
            className: "UpdateOperation",
            modelProperties: {
                planId: {
                    serializedName: "planId",
                    type: {
                        name: "String"
                    }
                },
                quantity: {
                    serializedName: "quantity",
                    type: {
                        name: "Number"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: ["Success", "Failure"]
                    }
                }
            }
        }
    };
    const FulfillmentInternalServerErrorResponse = {
        type: {
            name: "Composite",
            className: "FulfillmentInternalServerErrorResponse",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "FulfillmentInternalServerErrorResponseError"
                    }
                }
            }
        }
    };
    const FulfillmentInternalServerErrorResponseError = {
        type: {
            name: "Composite",
            className: "FulfillmentInternalServerErrorResponseError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    const FulfillmentOperationsUpdateSubscriptionHeaders = {
        type: {
            name: "Composite",
            className: "FulfillmentOperationsUpdateSubscriptionHeaders",
            modelProperties: {
                operationLocationUri: {
                    serializedName: "operation-location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    const FulfillmentOperationsDeleteSubscriptionHeaders = {
        type: {
            name: "Composite",
            className: "FulfillmentOperationsDeleteSubscriptionHeaders",
            modelProperties: {
                operationLocationUri: {
                    serializedName: "operation-location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var Mappers = /*#__PURE__*/Object.freeze({
        ResolvedSubscription: ResolvedSubscription,
        Subscription: Subscription,
        AadIdentifier: AadIdentifier,
        SubscriptionTerm: SubscriptionTerm,
        SubscriptionsResponse: SubscriptionsResponse,
        SubscriberPlan: SubscriberPlan,
        SubscriptionPlans: SubscriptionPlans,
        Plan: Plan,
        PlanComponents: PlanComponents,
        RecurrentBillingTerm: RecurrentBillingTerm,
        MeteringedQuantityIncluded: MeteringedQuantityIncluded,
        MeteringDimension: MeteringDimension,
        OperationList: OperationList,
        Operation: Operation,
        UpdateOperation: UpdateOperation,
        FulfillmentInternalServerErrorResponse: FulfillmentInternalServerErrorResponse,
        FulfillmentInternalServerErrorResponseError: FulfillmentInternalServerErrorResponseError,
        FulfillmentOperationsUpdateSubscriptionHeaders: FulfillmentOperationsUpdateSubscriptionHeaders,
        FulfillmentOperationsDeleteSubscriptionHeaders: FulfillmentOperationsDeleteSubscriptionHeaders
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    const accept = {
        parameterPath: "accept",
        mapper: {
            defaultValue: "application/json",
            isConstant: true,
            serializedName: "Accept",
            type: {
                name: "String"
            }
        }
    };
    const $host = {
        parameterPath: "$host",
        mapper: {
            serializedName: "$host",
            required: true,
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    const apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            defaultValue: "2018-08-31",
            isConstant: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    const requestId = {
        parameterPath: ["options", "requestId"],
        mapper: {
            serializedName: "x-ms-requestid",
            type: {
                name: "Uuid"
            }
        }
    };
    const correlationId = {
        parameterPath: ["options", "correlationId"],
        mapper: {
            serializedName: "x-ms-correlationid",
            type: {
                name: "Uuid"
            }
        }
    };
    const xMsMarketplaceToken = {
        parameterPath: "xMsMarketplaceToken",
        mapper: {
            serializedName: "x-ms-marketplace-token",
            required: true,
            type: {
                name: "String"
            }
        }
    };
    const continuationToken = {
        parameterPath: ["options", "continuationToken"],
        mapper: {
            serializedName: "continuationToken",
            type: {
                name: "String"
            }
        }
    };
    const subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            serializedName: "subscriptionId",
            required: true,
            type: {
                name: "Uuid"
            }
        }
    };
    const contentType = {
        parameterPath: ["options", "contentType"],
        mapper: {
            defaultValue: "application/json",
            isConstant: true,
            serializedName: "Content-Type",
            type: {
                name: "String"
            }
        }
    };
    const body = {
        parameterPath: "body",
        mapper: SubscriberPlan
    };
    const nextLink = {
        parameterPath: "nextLink",
        mapper: {
            serializedName: "nextLink",
            required: true,
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    const operationId = {
        parameterPath: "operationId",
        mapper: {
            serializedName: "operationId",
            required: true,
            type: {
                name: "Uuid"
            }
        }
    };
    const body1 = {
        parameterPath: "body",
        mapper: UpdateOperation
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    /// <reference lib="esnext.asynciterable" />
    /** Class representing a FulfillmentOperations. */
    class FulfillmentOperations {
        /**
         * Initialize a new instance of the class FulfillmentOperations class.
         * @param client Reference to the service client
         */
        constructor(client) {
            this.client = client;
        }
        /**
         * Lists all the SaaS subscriptions for a publisher.
         * @param options The options parameters.
         */
        listSubscriptions(options) {
            const iter = this.listSubscriptionsPagingAll(options);
            return {
                next() {
                    return iter.next();
                },
                [Symbol.asyncIterator]() {
                    return this;
                },
                byPage: () => {
                    return this.listSubscriptionsPagingPage(options);
                }
            };
        }
        listSubscriptionsPagingPage(options) {
            return __asyncGenerator(this, arguments, function* listSubscriptionsPagingPage_1() {
                let result = yield __await(this._listSubscriptions(options));
                yield yield __await(result.subscriptions || []);
                let continuationToken$$1 = result.nextLink;
                while (continuationToken$$1) {
                    result = yield __await(this._listSubscriptionsNext(continuationToken$$1, options));
                    continuationToken$$1 = result.nextLink;
                    yield yield __await(result.subscriptions || []);
                }
            });
        }
        listSubscriptionsPagingAll(options) {
            return __asyncGenerator(this, arguments, function* listSubscriptionsPagingAll_1() {
                var e_1, _a;
                try {
                    for (var _b = __asyncValues(this.listSubscriptionsPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                        const page = _c.value;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            });
        }
        /**
         * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource
         * ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a
         * partner's website, the URL contains a token in the query parameters. The partner is expected to use
         * this token and make a request to resolve it. The response contains the unique SaaS subscription ID,
         * name, offer ID, and plan for the resource. This token is valid for one hour only.
         * @param xMsMarketplaceToken The token query parameter in the URL when the user is redirected to the
         *                            SaaS partner's website from Azure (for example,  https://contoso.com/signup?token=..). Note, The URL
         *                            decodes the token value from the browser before using it.
         * @param options The options parameters.
         */
        resolve(xMsMarketplaceToken$$1, options) {
            const operationArguments = {
                xMsMarketplaceToken: xMsMarketplaceToken$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, resolveOperationSpec);
        }
        /**
         * Lists all the SaaS subscriptions for a publisher.
         * @param options The options parameters.
         */
        _listSubscriptions(options) {
            const operationArguments = {
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, listSubscriptionsOperationSpec);
        }
        /**
         * Gets the specified SaaS subscription. Use this call to get license information and plan information.
         * @param subscriptionId
         * @param options The options parameters.
         */
        getSubscription(subscriptionId$$1, options) {
            const operationArguments = {
                subscriptionId: subscriptionId$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, getSubscriptionOperationSpec);
        }
        /**
         * Use this call to update the plan, the user count (quantity), or both.
         * @param subscriptionId
         * @param body
         * @param options The options parameters.
         */
        updateSubscription(subscriptionId$$1, body$$1, options) {
            const operationArguments = {
                subscriptionId: subscriptionId$$1,
                body: body$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, updateSubscriptionOperationSpec);
        }
        /**
         * Unsubscribe and delete the specified subscription.
         * @param subscriptionId
         * @param options The options parameters.
         */
        deleteSubscription(subscriptionId$$1, options) {
            const operationArguments = {
                subscriptionId: subscriptionId$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, deleteSubscriptionOperationSpec);
        }
        /**
         * Use this call to find out if there are any private or public offers for the current publisher.
         * @param subscriptionId
         * @param options The options parameters.
         */
        listAvailablePlans(subscriptionId$$1, options) {
            const operationArguments = {
                subscriptionId: subscriptionId$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, listAvailablePlansOperationSpec);
        }
        /**
         * Use this call to activate a subscription.
         * @param subscriptionId
         * @param body
         * @param options The options parameters.
         */
        activateSubscription(subscriptionId$$1, body$$1, options) {
            const operationArguments = {
                subscriptionId: subscriptionId$$1,
                body: body$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, activateSubscriptionOperationSpec);
        }
        /**
         * ListSubscriptionsNext
         * @param nextLink The nextLink from the previous successful call to the ListSubscriptions method.
         * @param options The options parameters.
         */
        _listSubscriptionsNext(nextLink$$1, options) {
            const operationArguments = {
                nextLink: nextLink$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, listSubscriptionsNextOperationSpec);
        }
    }
    // Operation Specifications
    const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);
    const resolveOperationSpec = {
        path: "/saas/subscriptions/resolve",
        httpMethod: "POST",
        responses: {
            200: {
                bodyMapper: ResolvedSubscription
            },
            400: {
                isError: true
            },
            403: {
                isError: true
            },
            404: {
                isError: true
            },
            500: {
                isError: true
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [$host],
        headerParameters: [
            accept,
            requestId,
            correlationId,
            xMsMarketplaceToken
        ],
        serializer
    };
    const listSubscriptionsOperationSpec = {
        path: "/saas/subscriptions/",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: SubscriptionsResponse
            },
            403: {
                isError: true
            },
            500: {
                isError: true
            }
        },
        queryParameters: [apiVersion, continuationToken],
        urlParameters: [$host],
        headerParameters: [
            accept,
            requestId,
            correlationId
        ],
        serializer
    };
    const getSubscriptionOperationSpec = {
        path: "/saas/subscriptions/{subscriptionId}",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: Subscription
            },
            403: {
                isError: true
            },
            404: {
                isError: true
            },
            500: {
                isError: true
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [$host, subscriptionId],
        headerParameters: [
            accept,
            requestId,
            correlationId
        ],
        serializer
    };
    const updateSubscriptionOperationSpec = {
        path: "/saas/subscriptions/{subscriptionId}",
        httpMethod: "PATCH",
        responses: {
            202: {
                headersMapper: FulfillmentOperationsUpdateSubscriptionHeaders
            },
            400: {
                isError: true
            },
            403: {
                isError: true
            },
            404: {
                isError: true
            },
            500: {
                isError: true
            }
        },
        requestBody: body,
        queryParameters: [apiVersion],
        urlParameters: [$host, subscriptionId],
        headerParameters: [
            requestId,
            correlationId,
            contentType
        ],
        mediaType: "json",
        serializer
    };
    const deleteSubscriptionOperationSpec = {
        path: "/saas/subscriptions/{subscriptionId}",
        httpMethod: "DELETE",
        responses: {
            202: {
                headersMapper: FulfillmentOperationsDeleteSubscriptionHeaders
            },
            400: {
                isError: true
            },
            403: {
                isError: true
            },
            404: {
                isError: true
            },
            500: {
                isError: true
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [$host, subscriptionId],
        headerParameters: [requestId, correlationId],
        serializer
    };
    const listAvailablePlansOperationSpec = {
        path: "/saas/subscriptions/{subscriptionId}/listAvailablePlans",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: SubscriptionPlans
            },
            403: {
                isError: true
            },
            404: {
                isError: true
            },
            500: {
                isError: true
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [$host, subscriptionId],
        headerParameters: [
            accept,
            requestId,
            correlationId
        ],
        serializer
    };
    const activateSubscriptionOperationSpec = {
        path: "/saas/subscriptions/{subscriptionId}/activate",
        httpMethod: "POST",
        responses: {
            200: {},
            400: {
                isError: true
            },
            403: {
                isError: true
            },
            404: {
                isError: true
            },
            500: {
                isError: true
            }
        },
        requestBody: body,
        queryParameters: [apiVersion],
        urlParameters: [$host, subscriptionId],
        headerParameters: [
            requestId,
            correlationId,
            contentType
        ],
        mediaType: "json",
        serializer
    };
    const listSubscriptionsNextOperationSpec = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: SubscriptionsResponse
            },
            403: {
                isError: true
            },
            500: {
                isError: true
            }
        },
        queryParameters: [apiVersion, continuationToken],
        urlParameters: [$host, nextLink],
        headerParameters: [
            accept,
            requestId,
            correlationId
        ],
        serializer
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    /** Class representing a SubscriptionOperations. */
    class SubscriptionOperations {
        /**
         * Initialize a new instance of the class SubscriptionOperations class.
         * @param client Reference to the service client
         */
        constructor(client) {
            this.client = client;
        }
        /**
         * Lists the outstanding operations for the current publisher.
         * @param subscriptionId
         * @param options The options parameters.
         */
        listOperations(subscriptionId$$1, options) {
            const operationArguments = {
                subscriptionId: subscriptionId$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, listOperationsOperationSpec);
        }
        /**
         * Enables the publisher to track the status of the specified triggered async operation (such as
         * Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
         * @param subscriptionId
         * @param operationId
         * @param options The options parameters.
         */
        getOperationStatus(subscriptionId$$1, operationId$$1, options) {
            const operationArguments = {
                subscriptionId: subscriptionId$$1,
                operationId: operationId$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, getOperationStatusOperationSpec);
        }
        /**
         * Update the status of an operation to indicate success or failure with the provided values.
         * @param subscriptionId
         * @param operationId
         * @param body
         * @param options The options parameters.
         */
        updateOperationStatus(subscriptionId$$1, operationId$$1, body$$1, options) {
            const operationArguments = {
                subscriptionId: subscriptionId$$1,
                operationId: operationId$$1,
                body: body$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, updateOperationStatusOperationSpec);
        }
    }
    // Operation Specifications
    const serializer$1 = new coreHttp.Serializer(Mappers, /* isXml */ false);
    const listOperationsOperationSpec = {
        path: "/saas/subscriptions/{subscriptionId}/operations",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: OperationList
            },
            400: {
                isError: true
            },
            403: {
                isError: true
            },
            404: {
                isError: true
            },
            500: {
                isError: true
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [$host, subscriptionId],
        headerParameters: [
            accept,
            requestId,
            correlationId
        ],
        serializer: serializer$1
    };
    const getOperationStatusOperationSpec = {
        path: "/saas/subscriptions/{subscriptionId}/operations/{operationId}",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: Operation
            },
            400: {
                isError: true
            },
            403: {
                isError: true
            },
            404: {
                isError: true
            },
            500: {
                isError: true
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            operationId
        ],
        headerParameters: [
            accept,
            requestId,
            correlationId
        ],
        serializer: serializer$1
    };
    const updateOperationStatusOperationSpec = {
        path: "/saas/subscriptions/{subscriptionId}/operations/{operationId}",
        httpMethod: "PATCH",
        responses: {
            200: {},
            400: {
                isError: true
            },
            403: {
                isError: true
            },
            404: {
                isError: true
            },
            409: {
                isError: true
            },
            500: {
                isError: true
            }
        },
        requestBody: body1,
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            operationId
        ],
        headerParameters: [
            requestId,
            correlationId,
            contentType
        ],
        mediaType: "json",
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    const packageName = "microsoft.marketplace.saas";
    const packageVersion = "1.0.0";
    class SaaSAPIContext extends coreHttp.ServiceClient {
        /**
         * Initializes a new instance of the SaaSAPIContext class.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param options The parameter options
         */
        constructor(credentials, options) {
            if (credentials === undefined) {
                throw new Error("'credentials' cannot be null");
            }
            // Initializing default values for options
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                const defaultUserAgent = coreHttp.getDefaultUserAgentValue();
                options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;
            }
            if (!options.credentialScopes) {
                options.credentialScopes = [
                    "20e940b3-4c77-4b0b-9a53-9e16a1b010a7/.default"
                ];
            }
            super(credentials, options);
            this.requestContentType = "application/json; charset=utf-8";
            this.baseUri =
                options.endpoint || "https://marketplaceapi.microsoft.com/api";
            // Assigning values to Constant parameters
            this.$host = options.$host || "https://marketplaceapi.microsoft.com/api";
            this.apiVersion = options.apiVersion || "2018-08-31";
        }
    }

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    class SaaSAPI extends SaaSAPIContext {
        /**
         * Initializes a new instance of the SaaSAPI class.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param options The parameter options
         */
        constructor(credentials, options) {
            super(credentials, options);
            this.fulfillmentOperations = new FulfillmentOperations(this);
            this.subscriptionOperations = new SubscriptionOperations(this);
        }
    }

    exports.SaaSAPI = SaaSAPI;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=microsoft.marketplace.saas.js.map
