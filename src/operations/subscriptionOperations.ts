/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SaaSAPIContext } from "../saaSAPIContext";
import {
  SubscriptionOperationsListOperationsOptionalParams,
  SubscriptionOperationsListOperationsResponse,
  SubscriptionOperationsGetOperationStatusOptionalParams,
  SubscriptionOperationsGetOperationStatusResponse,
  UpdateOperation,
  SubscriptionOperationsUpdateOperationStatusOptionalParams
} from "../models";

/** Class representing a SubscriptionOperations. */
export class SubscriptionOperations {
  private readonly client: SaaSAPIContext;

  /**
   * Initialize a new instance of the class SubscriptionOperations class.
   * @param client Reference to the service client
   */
  constructor(client: SaaSAPIContext) {
    this.client = client;
  }

  /**
   * Lists the outstanding operations for the current publisher.
   * @param subscriptionId
   * @param options The options parameters.
   */
  listOperations(
    subscriptionId: string,
    options?: SubscriptionOperationsListOperationsOptionalParams
  ): Promise<SubscriptionOperationsListOperationsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      subscriptionId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listOperationsOperationSpec
    ) as Promise<SubscriptionOperationsListOperationsResponse>;
  }

  /**
   * Enables the publisher to track the status of the specified triggered async operation (such as
   * Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
   * @param subscriptionId
   * @param operationId
   * @param options The options parameters.
   */
  getOperationStatus(
    subscriptionId: string,
    operationId: string,
    options?: SubscriptionOperationsGetOperationStatusOptionalParams
  ): Promise<SubscriptionOperationsGetOperationStatusResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      subscriptionId,
      operationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOperationStatusOperationSpec
    ) as Promise<SubscriptionOperationsGetOperationStatusResponse>;
  }

  /**
   * Update the status of an operation to indicate success or failure with the provided values.
   * @param subscriptionId
   * @param operationId
   * @param body
   * @param options The options parameters.
   */
  updateOperationStatus(
    subscriptionId: string,
    operationId: string,
    body: UpdateOperation,
    options?: SubscriptionOperationsUpdateOperationStatusOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      subscriptionId,
      operationId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      updateOperationStatusOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationsOperationSpec: coreHttp.OperationSpec = {
  path: "/saas/subscriptions/{subscriptionId}/operations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationList
    },
    400: {
      isError: true
    },
    403: {
      isError: true
    },
    404: {
      isError: true
    },
    500: {
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [
    Parameters.accept,
    Parameters.requestId,
    Parameters.correlationId
  ],
  serializer
};
const getOperationStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/saas/subscriptions/{subscriptionId}/operations/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Operation
    },
    400: {
      isError: true
    },
    403: {
      isError: true
    },
    404: {
      isError: true
    },
    500: {
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.operationId
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.requestId,
    Parameters.correlationId
  ],
  serializer
};
const updateOperationStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/saas/subscriptions/{subscriptionId}/operations/{operationId}",
  httpMethod: "PATCH",
  responses: {
    200: {},
    400: {
      isError: true
    },
    403: {
      isError: true
    },
    404: {
      isError: true
    },
    409: {
      isError: true
    },
    500: {
      isError: true
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.operationId
  ],
  headerParameters: [
    Parameters.requestId,
    Parameters.correlationId,
    Parameters.contentType
  ],
  mediaType: "json",
  serializer
};
